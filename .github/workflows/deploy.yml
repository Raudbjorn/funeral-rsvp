name: Deploy to VPS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

    - name: Create deployment directory
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "mkdir -p /opt/funeral-service"

    - name: Copy files to server
      run: |
        rsync -avz --delete \
          --exclude '.git' \
          --exclude '.github' \
          --exclude 'node_modules' \
          --exclude '.next' \
          --exclude '.claude' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/opt/funeral-service/

    - name: Create environment file
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        cd /opt/funeral-service
        
        # Create .env.production from GitHub secrets
        cat > .env.production << 'ENV_EOF'
        # Production Environment Variables
        DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        TAILSCALE_AUTHKEY=${{ secrets.TAILSCALE_AUTHKEY }}
        PORKBUN_API_KEY=${{ secrets.PORKBUN_API_KEY }}
        PORKBUN_SECRET_KEY=${{ secrets.PORKBUN_SECRET_KEY }}
        NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
        NEXT_PUBLIC_OPENWEATHER_API_KEY=${{ secrets.NEXT_PUBLIC_OPENWEATHER_API_KEY }}
        NEXT_PUBLIC_SITE_URL=https://${{ secrets.DOMAIN_NAME }}
        GID=1000

        # CrowdSec API Keys (will be generated during setup)
        CROWDSEC_BOUNCER_API_KEY=
        CROWDSEC_DASHBOARD_API_KEY=

        # Redis Configuration
        REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@redis:6379

        # Split DNS Configuration (optional)
        ENABLE_SPLIT_DNS=true
        ADMIN_SUBDOMAINS=admin,files,logs,redis,crowdsec,containers,monitoring

        # Tailscale removed for simplified deployment
        ENV_EOF
        
        # Secure the environment file
        chmod 600 .env.production
        EOF

    - name: Install Docker if needed
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        if ! command -v docker &> /dev/null; then
          echo "Installing Docker..."
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          systemctl start docker
          systemctl enable docker
          
          # Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
        else
          echo "Docker already installed"
        fi
        EOF

    - name: Deploy application
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
        cd /opt/funeral-service
        
        # Load environment variables
        export $(cat .env.production | xargs)
        
        # Create required directories
        mkdir -p data nginx/sites nginx/ssl public/uploads
        
        # Set proper permissions
        chown -R 1000:1000 data public/uploads
        
        # Stop existing containers
        docker-compose down --remove-orphans || true
        
        # Build and start services
        docker-compose up --build -d
        
        # Wait for services to start
        echo "Waiting for services to start..."
        sleep 30
        
        # Generate CrowdSec API keys if not already present
        if [ -z "$(grep CROWDSEC_BOUNCER_API_KEY= .env.production | cut -d= -f2)" ]; then
          echo "Generating CrowdSec API keys..."
          BOUNCER_KEY=$(docker-compose exec -T crowdsec cscli bouncers add nginx-bouncer-$(date +%s) -o raw)
          DASHBOARD_KEY=$(docker-compose exec -T crowdsec cscli bouncers add dashboard-$(date +%s) -o raw)
          
          # Update environment file
          sed -i "s/CROWDSEC_BOUNCER_API_KEY=/CROWDSEC_BOUNCER_API_KEY=${BOUNCER_KEY}/" .env.production
          sed -i "s/CROWDSEC_DASHBOARD_API_KEY=/CROWDSEC_DASHBOARD_API_KEY=${DASHBOARD_KEY}/" .env.production
          
          # Restart services with new keys
          docker-compose restart crowdsec-nginx-bouncer crowdsec-dashboard
        fi
        
        # Tailscale IP detection removed for simplified deployment
        
        # Health check
        echo "Performing health check..."
        sleep 10
        if docker-compose exec -T app curl -f http://localhost:3000/api/health; then
          echo "✅ Application is healthy"
        else
          echo "❌ Application health check failed"
          docker-compose logs app
        fi
        
        # Show status
        echo "📊 Container Status:"
        docker-compose ps
        EOF

    - name: Verify deployment
      run: |
        echo "🎉 Deployment completed!"
        echo "🌐 Site: https://${{ secrets.DOMAIN_NAME }}"
        echo "📊 Check status: ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'cd /opt/funeral-service && docker-compose ps'"

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed! Check the logs above for details."
        echo "🔍 Debug: ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'cd /opt/funeral-service && docker-compose logs'"