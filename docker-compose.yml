version: '3.8'

services:
  # Next.js Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: memorial-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./public/uploads:/app/public/uploads
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for rate limiting and sessions
  redis:
    image: redis:7-alpine
    container_name: memorial-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: memorial-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot-web:/var/www/certbot:ro
      - certbot-certs:/etc/letsencrypt:ro
      - nginx-logs:/var/log/nginx
    networks:
      - app-network
      - crowdsec-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/dns-porkbun
    container_name: memorial-certbot
    restart: "no"
    volumes:
      - certbot-certs:/etc/letsencrypt
      - certbot-web:/var/www/certbot
      - ./certbot:/etc/certbot:ro
    environment:
      - PORKBUN_API_KEY=${PORKBUN_API_KEY}
      - PORKBUN_SECRET_KEY=${PORKBUN_SECRET_KEY}
    command: >
      sh -c "
        trap exit TERM;
        while :; do
          certbot renew --quiet --dns-porkbun --dns-porkbun-credentials /etc/certbot/porkbun.ini;
          sleep 12h & wait $${!};
        done
      "

  # CrowdSec Security Engine
  crowdsec:
    image: crowdsecurity/crowdsec
    container_name: memorial-crowdsec
    restart: unless-stopped
    environment:
      - COLLECTIONS=crowdsecurity/nginx crowdsecurity/base-http-scenarios
      - GID=${GID:-1000}
    volumes:
      - crowdsec-db:/var/lib/crowdsec/data
      - crowdsec-config:/etc/crowdsec
      - nginx-logs:/var/log/nginx:ro
      - /var/log/auth.log:/var/log/auth.log:ro
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml:ro
    ports:
      - "127.0.0.1:8080:8080"  # CrowdSec Local API (localhost only)
    networks:
      - crowdsec-network
      - app-network
    healthcheck:
      test: ["CMD", "cscli", "metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CrowdSec Bouncer for Nginx
  crowdsec-nginx-bouncer:
    image: crowdsecurity/nginx-crowdsec-bouncer
    container_name: memorial-bouncer
    restart: unless-stopped
    environment:
      - CROWDSEC_BOUNCER_API_KEY=${CROWDSEC_BOUNCER_API_KEY}
      - CROWDSEC_AGENT_HOST=crowdsec:8080
    volumes:
      - ./nginx/bouncer.conf:/etc/nginx/conf.d/crowdsec.conf:ro
    networks:
      - crowdsec-network
    depends_on:
      - crowdsec

  # CrowdSec Dashboard (Web UI)
  crowdsec-dashboard:
    image: crowdsecurity/dashboard
    container_name: memorial-crowdsec-dashboard
    restart: unless-stopped
    environment:
      - CROWDSEC_API_URL=http://crowdsec:8080
      - CROWDSEC_API_KEY=${CROWDSEC_DASHBOARD_API_KEY}
    networks:
      - crowdsec-network
      - app-network
    depends_on:
      - crowdsec

  # Redis Admin Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: memorial-redis-admin
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=memorial:redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_PASSWORD}
    networks:
      - app-network
    depends_on:
      - redis

  # System Monitoring Dashboard
  netdata:
    image: netdata/netdata:latest
    container_name: memorial-monitoring
    restart: unless-stopped
    pid: host
    network_mode: host
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    environment:
      - NETDATA_CLAIM_TOKEN=${NETDATA_CLAIM_TOKEN:-}
      - NETDATA_CLAIM_URL=https://app.netdata.cloud

  # Container Management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: memorial-portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - app-network

  # Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: memorial-logs
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DOZZLE_NO_ANALYTICS=true
      - DOZZLE_LEVEL=info
    networks:
      - app-network

  # File Manager for uploads and backups
  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: memorial-files
    restart: unless-stopped
    volumes:
      - ./data:/srv/data
      - ./public/uploads:/srv/uploads
      - ./backups:/srv/backups
      - ./filebrowser.db:/database.db
      - ./filebrowser.json:/config.json
    environment:
      - FB_DATABASE=/database.db
      - FB_CONFIG=/config.json
    networks:
      - app-network

  # Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: memorial-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
      - WATCHTOWER_INCLUDE_STOPPED=true
    command: --interval 3600 --cleanup

  # Tailscale sidecar for admin access
  tailscale:
    image: tailscale/tailscale:latest
    container_name: memorial-tailscale
    hostname: memorial-admin
    restart: unless-stopped
    environment:
      - TS_AUTHKEY=${TAILSCALE_AUTHKEY}
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
      - TS_SERVE_CONFIG=/config/serve.json
    volumes:
      - tailscale-state:/var/lib/tailscale
      - /dev/net/tun:/dev/net/tun
      - ./tailscale:/config:ro
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1
    networks:
      - app-network
    depends_on:
      - app

  # Log aggregation
  promtail:
    image: grafana/promtail
    container_name: memorial-promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - nginx-logs:/var/log/nginx:ro
      - ./promtail/promtail.yml:/etc/promtail/config.yml:ro
    networks:
      - app-network
    command: -config.file=/etc/promtail/config.yml

networks:
  app-network:
    driver: bridge
    internal: false
  crowdsec-network:
    driver: bridge

volumes:
  redis-data:
  crowdsec-db:
  crowdsec-config:
  certbot-certs:
  certbot-web:
  nginx-logs:
  tailscale-state:
  netdataconfig:
  netdatalib:
  netdatacache:
  portainer-data: